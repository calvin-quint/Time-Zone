# Function to check if a registry key exists
function Test-RegistryKeyExists {
    param (
        [string]$Path
    )
    Test-Path $Path -PathType Container
}

# Function to check if a registry value exists
function Test-RegistryValueExists {
    param (
        [string]$Path,
        [string]$Name
    )
    Get-ItemProperty -Path $Path -Name $Name -ErrorAction SilentlyContinue | Out-Null
}

# Function to set registry value and handle failure
function New-RegistryValue {
    param (
        [string]$Path,
        [string]$Name,
        [object]$Value,
        [string]$Type
    )
    try {
        New-ItemProperty -Path $Path -Name $Name -Value $Value -PropertyType $Type -Force -ErrorAction Stop | Out-Null
        Write-Host "Registry key '$Name' set successfully at path '$Path'."
    } catch {
        Write-Host "Failed to set registry key '$Name' at path '$Path'. Error: $_"
        exit 1
    }
}

# Function to configure or check registry values
function Set-RegistryValue {
    param (
        [string]$Path,
        [string]$Name,
        [object]$Value,
        [string]$Type
    )

    if (Test-RegistryKeyExists $Path) {
        if (-not (Test-RegistryValueExists $Path $Name)) {
            New-RegistryValue -Path $Path -Name $Name -Value $Value -Type $Type
            return $true
        }

        $currentValue = (Get-ItemProperty -Path $Path -Name $Name).($Name)
        if ($currentValue -ne $Value) {
            New-RegistryValue -Path $Path -Name $Name -Value $Value -Type $Type
            return $true
        }

        return $false
    }
    else {
        try {
            New-Item -Path $Path -Force | Out-Null
            Write-Host "Registry key '$Path' created successfully."
            New-RegistryValue -Path $Path -Name $Name -Value $Value -Type $Type
            return $true
        } catch {
            Write-Host "Failed to create registry key '$Path'. Error: $_"
            exit 1
        }
    }
}

# Main function
function Main {
    $settings = @(
        @{
            Path  = "HKLM:\SYSTEM\CurrentControlSet\Services\tzautoupdate"
            Name  = "Start"
            Value = 3
            Type  = "DWord"
        },
        @{
            Path  = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Sensor\Overrides\{BFA794E4-F964-4FDB-90F6-51056BFE4B44}"
            Name  = "SensorPermissionState"
            Value = 1
            Type  = "DWord"
        },
        @{
            Path  = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors"
            Name  = "DisableLocation"
            Value = 0
            Type  = "DWord"
        }
    )

    $settings | ForEach-Object {
        if (Set-RegistryValue -Path $_.Path -Name $_.Name -Value $_.Value -Type $_.Type) {
            Write-Host "Registry key '$($_.Name)' configured successfully."
        } else {
            Write-Host "Registry key '$($_.Name)' is already set to the correct value."
        }
    }

    # Start Location Services
    try {
        Start-Service -Name "lfsvc" -ErrorAction Stop
        Write-Host "Location Services started successfully."
    } catch {
        Write-Host "Failed to start Location Services. Error: $_"
        exit 1
    }

    # Resynchronize Time
    try {
        w32tm /resync
        Write-Host "Time resynchronized successfully."
    } catch {
        Write-Host "Failed to resynchronize time. Error: $_"
        exit 1
    }
}

# Call the main function
Main
